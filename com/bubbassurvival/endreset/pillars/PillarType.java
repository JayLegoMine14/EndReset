package com.bubbassurvival.endreset.pillars;

import java.util.ArrayList;
import java.util.Arrays;

import com.bubbassurvival.endreset.main.EndReset;

public enum PillarType {

    Small, Medium, Large, Mega;

    public static PillarType chooseRandomPillarType(){
        double chance = Math.random();
        
        if(chance <= EndReset.megatowerfrequency)
            return PillarType.Mega;
        
        chance = Math.random();

        if(chance < .33)
            return PillarType.Small;
        else if(chance >= .33 && chance <= .66)
            return PillarType.Medium;
        else if(chance > .66 && chance <= 1)
            return PillarType.Large;
        else
            return PillarType.Small;
    }

    public static ArrayList<Character> getBluePrints(PillarType pt, int layers){
        switch (pt){
        case Large:
            return new ArrayList<Character>(
                    Arrays.asList(  'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',

                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', '■', '■', '■', '■', 'T', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));
        case Medium:
            return new ArrayList<Character>(
                    Arrays.asList(  'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',

                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', '■', '■', 'T', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));
        case Small:
            return new ArrayList<Character>(
                    Arrays.asList(  'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',

                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',

                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', '■', 'T', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                
                                    'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));
        case Mega:
            switch(layers){
            case 1:
                return new ArrayList<Character>(
                        Arrays.asList(  'A', 'A', 'A', 'A', 'A', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',

                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
        
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                    
                                        '■', '■', '■', '■', '■', '■', '■', 'T', '■', '■', '■', '■', '■', '■', '■', 'A',
                    
                                        'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));
            case 2:
                return new ArrayList<Character>(
                        Arrays.asList(  'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',

                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',

                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', '■', '■', '■', 'T', '■', '■', '■', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));
            case 3:
                return new ArrayList<Character>(
                        Arrays.asList(  'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',

                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', '■', 'A', 'A', '■', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', '■', 'A', '■', '■', '■', '■', '■', '■', '■', 'A', '■', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', '■', '■', '■', '■', '■', 'T', '■', '■', '■', '■', '■', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', '■', 'A', '■', '■', '■', '■', '■', '■', '■', 'A', '■', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', '■', 'A', 'A', '■', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));
            case 4:
                return new ArrayList<Character>(
                        Arrays.asList(  'A', 'A', 'A', 'A', 'A', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',

                                        'A', 'A', 'A', 'A', '■', 'A', 'A', '■', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A',

                                        'A', 'A', '■', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', '■', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                    
                                        'A', '■', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', '■', 'A', 'A',
                    
                                        'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A',
                    
                                        'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A',
                    
                                        '■', '■', '■', '■', '■', '■', '■', 'T', '■', '■', '■', '■', '■', '■', '■', 'A',
                    
                                        'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A',
                    
                                        'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A',
                    
                                        'A', '■', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', '■', 'A', 'A',
                    
                                        'A', 'A', 'A', '■', '■', '■', '■', '■', '■', '■', '■', '■', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', '■', 'A', 'A', '■', '■', '■', '■', '■', 'A', 'A', '■', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', '■', 'A', 'A', '■', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', '■', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                    
                                        'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'));
            default:   
                return new ArrayList<Character>();
            }
        default:
            return new ArrayList<Character>();

        }
    }

}
